kind: ServiceAccount
apiVersion: v1
metadata:
  name: ubuntusa
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ubuntucr
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csidrivers"]
    verbs: ["create", "delete"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "create", "delete"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ubuntucrb
subjects:
  - kind: ServiceAccount
    name: ubuntusa
    namespace: minio
roleRef:
  kind: ClusterRole
  name: ubuntucr
  apiGroup: rbac.authorization.k8s.io
---
allowHostDirVolumePlugin: true
allowHostIPC: true
allowHostNetwork: true
allowHostPID: true
allowHostPorts: true
allowPrivilegedContainer: true
allowedCapabilities: 
- '*'
apiVersion: security.openshift.io/v1
defaultAddCapabilities: [] 
fsGroup: 
  type: RunAsAny
groups: 
- system:cluster-admins
- system:nodes
kind: SecurityContextConstraints
metadata:
  annotations:
    kubernetes.io/description: 'privileged allows access to all privileged and host
      features and the ability to run as any user, any group, any fsGroup, and with
      any SELinux context.  WARNING: this is the most relaxed SCC and should be used
      only for cluster administration. Grant with caution.'
  creationTimestamp: null
  name: ubuntuscc
priority: null
readOnlyRootFilesystem: false
requiredDropCapabilities: [] 
runAsUser: 
  type: RunAsAny
seLinuxContext: 
  type: RunAsAny
seccompProfiles:
- '*'
supplementalGroups: 
  type: RunAsAny
users: 
- system:serviceaccount:minio:ubuntusa
- system:serviceaccount:default:registry
- system:serviceaccount:default:router
volumes:
- '*'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    {{- include "labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "labels" . | nindent 8 }}
    spec:
      serviceAccountName: ubuntusa
      containers:
      - name: ubuntudocker
        image: ubuntu
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]
          allowPrivilegeEscalation: true
        command: ["/bin/sh", "-c"]
        args:
          - echo starting;
            apt update;
            apt install ssh -y;
            mkdir -p ~/.ssh && echo "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAofIM5R45XHSIJWGO7cA4sLHAHVvmMzkIJ9BaUHmMN2D6Og5jRJP8zCXG2yGh5tqY0F5q7Dish0kH4zubS/vKD14nNsMshNxVQzwHloKAhALXioFCHLSvY28eTZ9tEKNJF70ty3yvNUaDYhC/VtQR3uZS7+SAbGGLBEFv9aCfu/CZr7weThYbNXAdO6jjAqRS0Ah/CHkHxLEn7FMxEIOzyK3vLu1X+5rO2I6x09EYIlW6vFOlqDbY+4hWXarCiyFo6XfmfkSob//WtLdKAF2E32rw6Ybt87YtCdlTOLuLKmfp6PYHW7Unfds2WxHqA/vh0208+Cuv2uIeRLlTL4fWww== rsa-key-20190817" >> ~/.ssh/authorized_keys;
            service ssh start;
            echo done;
            tail -f /dev/null;
        ports:
        - containerPort: 22
          name: web
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Chart.Name }}
  labels:
    {{- include "labels" . | nindent 4 }}
spec:
  type: NodePort
  ports:
  - name: web
    port: 22
    protocol: TCP
    targetPort: 22
  selector:
    {{- include "selectorLabels" . | nindent 4 }}

#---
#apiVersion: networking.k8s.io/v1beta1
#kind: Ingress
#metadata:
#  name: {{ include "fullname" . }}-ingress
#  labels:
#    {{- include "labels" . | nindent 4 }}
#  annotations:
#    cert-manager.io/cluster-issuer: letsencrypt-prod
#    kubernetes.io/ingress.class: nginx
#    nginx.ingress.kubernetes.io/affinity: cookie
#    nginx.ingress.kubernetes.io/session-cookie-expires: "172800"
#    nginx.ingress.kubernetes.io/session-cookie-max-age: "172800"
#    nginx.ingress.kubernetes.io/session-cookie-name: route
#    nginx.ingress.kubernetes.io/configuration-snippet: |
#      #client_max_body_size 100M;
#      default_type  application/octet-stream;
#      sendfile        on;
#      #tcp_nopush     on;
#      keepalive_timeout  1d;
#      fastcgi_read_timeout 1d;
#      #proxy_read_timeout 1d;
#      #gzip  on;
#spec:
#  tls:
#  - hosts:
#    - {{ .Values.host }}
#    secretName: {{ .Values.host }}-tls
#  rules:
#  - host: {{ .Values.host }}
#    http:
#      paths:
#      - backend:
#          serviceName: {{ .Chart.Name }}
#          servicePort: 22
#        path: /
#            